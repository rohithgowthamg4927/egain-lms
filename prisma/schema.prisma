generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int                @id @default(autoincrement()) @map("user_id")
  fullName          String             @map("full_name") @db.VarChar(255)
  email             String             @unique @db.VarChar(255)
  phoneNumber       String?            @map("phone_number") @db.VarChar(20)
  role              Role
  password          String             @db.VarChar(255)
  mustResetPassword Boolean?           @default(true) @map("must_reset_password")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamptz(6)
  address           String?
  profilePicture    ProfilePicture?
  batches           Batch[]            @relation("BatchInstructor")
  studentBatches    StudentBatch[]     @relation("StudentInBatch")
  studentCourses    StudentCourse[]    @relation("StudentInCourse")
  instructorCourses InstructorCourse[] @relation("InstructorForCourse")
  courseReviews     CourseReview[]     @relation("UserReviews")

  @@map("users")
}

model ProfilePicture {
  pictureId Int       @id @default(autoincrement()) @map("picture_id")
  userId    Int?      @unique @map("user_id")
  fileName  String    @map("file_name") @db.VarChar(255)
  fileUrl   String    @map("file_url") @db.VarChar(255)
  fileType  String    @map("file_type") @db.VarChar(50)
  fileSize  Int       @map("file_size")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  user      User?     @relation(fields: [userId], references: [userId])

  @@map("profile_pictures")
}

model CourseCategory {
  categoryId   Int       @id @default(autoincrement()) @map("category_id")
  categoryName String    @map("category_name") @db.VarChar(255)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  courses      Course[]  @relation("CourseCategory")

  @@map("course_categories")
}

model Course {
  courseId          Int                @id @default(autoincrement()) @map("course_id")
  courseName        String             @map("course_name") @db.VarChar(255)
  courseLevel       Level              @map("course_level")
  categoryId        Int?               @map("category_id")
  description       String?
  thumbnailUrl      String?            @map("thumbnail_url") @db.VarChar(255)
  isPublished       Boolean?           @default(false) @map("is_published")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamptz(6)
  category          CourseCategory?    @relation("CourseCategory", fields: [categoryId], references: [categoryId])
  batches           Batch[]            @relation("CourseBatch")
  resources         Resource[]         @relation("CourseResources")
  studentCourses    StudentCourse[]    @relation("CourseEnrollments")
  instructorCourses InstructorCourse[] @relation("CourseInstructors")
  reviews           CourseReview[]     @relation("CourseReviews")

  @@map("courses")
}

model Batch {
  batchId      Int            @id @default(autoincrement()) @map("batch_id")
  batchName    String         @map("batch_name") @db.VarChar(255)
  courseId     Int?           @map("course_id")
  instructorId Int?           @map("instructor_id")
  startDate    DateTime       @map("start_date") @db.Timestamptz(6)
  endDate      DateTime       @map("end_date") @db.Timestamptz(6)
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?      @default(now()) @map("updated_at") @db.Timestamptz(6)
  course       Course?        @relation("CourseBatch", fields: [courseId], references: [courseId])
  instructor   User?          @relation("BatchInstructor", fields: [instructorId], references: [userId])
  students     StudentBatch[] @relation("BatchStudents")
  schedules    Schedule[]     @relation("BatchSchedules")

  @@map("batches")
}

model StudentCourse {
  studentCourseId Int       @id @default(autoincrement()) @map("student_course_id")
  studentId       Int?      @map("student_id")
  courseId        Int?      @map("course_id")
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  student         User?     @relation("StudentInCourse", fields: [studentId], references: [userId])
  course          Course?   @relation("CourseEnrollments", fields: [courseId], references: [courseId])

  @@unique([studentId, courseId])
  @@map("student_courses")
}

model StudentBatch {
  studentBatchId Int       @id @default(autoincrement()) @map("student_batch_id")
  studentId      Int?      @map("student_id")
  batchId        Int?      @map("batch_id")
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  student        User?     @relation("StudentInBatch", fields: [studentId], references: [userId])
  batch          Batch?    @relation("BatchStudents", fields: [batchId], references: [batchId])

  @@unique([studentId, batchId])
  @@map("student_batches")
}

model InstructorCourse {
  instructorCourseId Int       @id @default(autoincrement()) @map("instructor_course_id")
  instructorId       Int?      @map("instructor_id")
  courseId           Int?      @map("course_id")
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  instructor         User?     @relation("InstructorForCourse", fields: [instructorId], references: [userId])
  course             Course?   @relation("CourseInstructors", fields: [courseId], references: [courseId])

  @@unique([instructorId, courseId])
  @@map("instructor_courses")
}

model Schedule {
  scheduleId    Int       @id @default(autoincrement()) @map("schedule_id")
  batchId       Int?      @map("batch_id")
  startTime     DateTime  @map("start_time") @db.Time(6)
  endTime       DateTime  @map("end_time") @db.Time(6)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  meetingLink   String?   @map("meeting_link")
  topic         String?   @map("topic")
  platform      String?   @map("platform")
  schedule_date DateTime  @default(now()) @db.Timestamp(6)
  batch         Batch?    @relation("BatchSchedules", fields: [batchId], references: [batchId])

  @@map("schedules")
}

model Resource {
  resourceId Int       @id @default(autoincrement()) @map("resource_id")
  courseId   Int?      @map("course_id")
  title      String    @db.VarChar(255)
  type       String    @db.VarChar(50)
  url        String    @db.VarChar(255)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  course     Course?   @relation("CourseResources", fields: [courseId], references: [courseId])

  @@map("resources")
}

model CourseReview {
  reviewId  Int       @id @default(autoincrement()) @map("review_id")
  courseId  Int?      @map("course_id")
  userId    Int?      @map("user_id")
  rating    Int       @db.SmallInt
  review    String?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  user      User?     @relation("UserReviews", fields: [userId], references: [userId])
  course    Course?   @relation("CourseReviews", fields: [courseId], references: [courseId])

  @@unique([courseId, userId])
  @@map("course_reviews")
}

enum Role {
  admin
  instructor
  student
}

enum Level {
  beginner
  intermediate
  advanced
}

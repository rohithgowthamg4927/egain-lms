generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int                @id @default(autoincrement()) @map("user_id")
  fullName          String             @map("full_name") @db.VarChar(255)
  email             String             @unique @db.VarChar(255)
  phoneNumber       String?            @map("phone_number") @db.VarChar(20)
  role              Role
  password          String             @db.VarChar(255)
  mustResetPassword Boolean?           @default(true) @map("must_reset_password")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamptz(6)
  address           String?
  markedAttendances Attendance[]       @relation("AttendanceMarkedBy")
  attendances       Attendance[]       @relation("UserAttendance")
  batches           Batch[]            @relation("BatchInstructor")
  courseReviews     CourseReview[]     @relation("UserReviews")
  instructorCourses InstructorCourse[] @relation("InstructorForCourse")
  profilePicture    ProfilePicture?
  uploadedResources Resource[]         @relation("ResourceUploader")
  studentBatches    StudentBatch[]     @relation("StudentInBatch")
  studentCourses    StudentCourse[]    @relation("StudentInCourse")
  batchFeedbacks    BatchFeedback[]

  @@map("users")
}

model ProfilePicture {
  pictureId Int       @id @default(autoincrement()) @map("picture_id")
  userId    Int?      @unique @map("user_id")
  fileName  String    @map("file_name") @db.VarChar(255)
  fileUrl   String    @map("file_url") @db.VarChar(255)
  fileType  String    @map("file_type") @db.VarChar(50)
  fileSize  Int       @map("file_size")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  user      User?     @relation(fields: [userId], references: [userId])

  @@map("profile_pictures")
}

model CourseCategory {
  categoryId   Int       @id @default(autoincrement()) @map("category_id")
  categoryName String    @map("category_name") @db.VarChar(255)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  courses      Course[]  @relation("CourseCategory")

  @@map("course_categories")
}

model Course {
  courseId          Int                @id @default(autoincrement()) @map("course_id")
  courseName        String             @map("course_name") @db.VarChar(255)
  courseLevel       Level              @map("course_level")
  categoryId        Int?               @map("category_id")
  description       String?
  thumbnailUrl      String?            @map("thumbnail_url") @db.VarChar(255)
  isPublished       Boolean?           @default(false) @map("is_published")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamptz(6)
  batches           Batch[]            @relation("CourseBatch")
  reviews           CourseReview[]     @relation("CourseReviews")
  category          CourseCategory?    @relation("CourseCategory", fields: [categoryId], references: [categoryId])
  instructorCourses InstructorCourse[] @relation("CourseInstructors")
  studentCourses    StudentCourse[]    @relation("CourseEnrollments")

  @@map("courses")
}

model Batch {
  batchId      Int            @id @default(autoincrement()) @map("batch_id")
  batchName    String         @map("batch_name") @db.VarChar(255)
  courseId     Int?           @map("course_id")
  instructorId Int?           @map("instructor_id")
  startDate    DateTime       @map("start_date") @db.Timestamptz(6)
  endDate      DateTime       @map("end_date") @db.Timestamptz(6)
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?      @default(now()) @map("updated_at") @db.Timestamptz(6)
  course       Course?        @relation("CourseBatch", fields: [courseId], references: [courseId])
  instructor   User?          @relation("BatchInstructor", fields: [instructorId], references: [userId])
  resources    Resource[]     @relation("BatchResources")
  schedules    Schedule[]     @relation("BatchSchedules")
  students     StudentBatch[] @relation("BatchStudents")
  batchFeedbacks BatchFeedback[]

  @@map("batches")
}

model StudentCourse {
  studentCourseId Int       @id @default(autoincrement()) @map("student_course_id")
  studentId       Int?      @map("student_id")
  courseId        Int?      @map("course_id")
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  course          Course?   @relation("CourseEnrollments", fields: [courseId], references: [courseId])
  student         User?     @relation("StudentInCourse", fields: [studentId], references: [userId])

  @@unique([studentId, courseId])
  @@map("student_courses")
}

model StudentBatch {
  studentBatchId Int       @id @default(autoincrement()) @map("student_batch_id")
  studentId      Int?      @map("student_id")
  batchId        Int?      @map("batch_id")
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  batch          Batch?    @relation("BatchStudents", fields: [batchId], references: [batchId])
  student        User?     @relation("StudentInBatch", fields: [studentId], references: [userId])

  @@unique([studentId, batchId])
  @@map("student_batches")
}

model InstructorCourse {
  instructorCourseId Int       @id @default(autoincrement()) @map("instructor_course_id")
  instructorId       Int?      @map("instructor_id")
  courseId           Int?      @map("course_id")
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  course             Course?   @relation("CourseInstructors", fields: [courseId], references: [courseId])
  instructor         User?     @relation("InstructorForCourse", fields: [instructorId], references: [userId])

  @@unique([instructorId, courseId])
  @@map("instructor_courses")
}

model Schedule {
  scheduleId   Int          @id @default(autoincrement()) @map("schedule_id")
  batchId      Int?         @map("batch_id")
  startTime    DateTime     @map("start_time") @db.Time(6)
  endTime      DateTime     @map("end_time") @db.Time(6)
  createdAt    DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?    @default(now()) @map("updated_at") @db.Timestamptz(6)
  meetingLink  String?      @map("meeting_link")
  topic        String?      @map("topic")
  platform     String?      @map("platform")
  scheduleDate DateTime     @default(now()) @map("schedule_date") @db.Timestamp(6)
  attendances  Attendance[] @relation("ScheduleAttendance")
  batch        Batch?       @relation("BatchSchedules", fields: [batchId], references: [batchId], onDelete: Cascade)

  @@map("schedules")
}

model Resource {
  resourceId   Int       @id @default(autoincrement()) @map("resource_id")
  title        String    @db.VarChar(255)
  description  String?
  fileName     String    @map("file_name") @db.VarChar(255)
  fileUrl      String    @map("file_url") @db.VarChar(255)
  batchId      Int       @map("batch_id")
  uploadedById Int       @map("uploaded_by_id")
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  batch        Batch     @relation("BatchResources", fields: [batchId], references: [batchId])
  uploadedBy   User      @relation("ResourceUploader", fields: [uploadedById], references: [userId])

  @@index([batchId])
  @@index([uploadedById])
  @@map("resources")
}

model CourseReview {
  reviewId  Int       @id @default(autoincrement()) @map("review_id")
  courseId  Int?      @map("course_id")
  userId    Int?      @map("user_id")
  rating    Int       @db.SmallInt
  review    String?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  course    Course?   @relation("CourseReviews", fields: [courseId], references: [courseId])
  user      User?     @relation("UserReviews", fields: [userId], references: [userId])

  @@unique([courseId, userId])
  @@map("course_reviews")
}

model Attendance {
  attendanceId Int      @id @default(autoincrement()) @map("attendance_id")
  scheduleId   Int      @map("schedule_id")
  userId       Int      @map("user_id")
  status       Status   @default(present)
  markedBy     Int      @map("marked_by")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  markedByUser User     @relation("AttendanceMarkedBy", fields: [markedBy], references: [userId])
  schedule     Schedule @relation("ScheduleAttendance", fields: [scheduleId], references: [scheduleId], onDelete: Cascade)
  user         User     @relation("UserAttendance", fields: [userId], references: [userId])

  @@unique([scheduleId, userId])
  @@map("attendances")
}

model BatchFeedback {
  feedbackId   Int      @id @default(autoincrement())
  batchId      Int
  studentId    Int
  interval     Int
  rating       Int
  feedback     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  batch        Batch    @relation(fields: [batchId], references: [batchId], onDelete: Cascade)
  student      User     @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@unique([batchId, studentId, interval])
}

enum Status {
  present
  absent
  late
}

enum Role {
  admin
  instructor
  student
}

enum Level {
  beginner
  intermediate
  advanced
}

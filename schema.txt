
-- PostgreSQL DDL equivalent to the Prisma schema

-- Create enum types
CREATE TYPE "Role" AS ENUM ('ADMIN', 'INSTRUCTOR', 'STUDENT');
CREATE TYPE "Level" AS ENUM ('BEGINNER', 'INTERMEDIATE', 'ADVANCED');

-- Create tables
CREATE TABLE "User" (
  "id" SERIAL PRIMARY KEY,
  "email" TEXT UNIQUE NOT NULL,
  "password" TEXT NOT NULL,
  "role" "Role" NOT NULL DEFAULT 'STUDENT',
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "bio" TEXT,
  "fullName" TEXT NOT NULL,
  "isFirstLogin" BOOLEAN NOT NULL DEFAULT TRUE,
  "photoUrl" TEXT,
  "phone" TEXT,
  "address" TEXT
);

CREATE TABLE "CourseCategory" (
  "id" SERIAL PRIMARY KEY,
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "categoryName" TEXT UNIQUE NOT NULL
);

CREATE TABLE "Course" (
  "id" SERIAL PRIMARY KEY,
  "description" TEXT,
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "courseLevel" "Level" NOT NULL DEFAULT 'BEGINNER',
  "courseName" TEXT NOT NULL,
  "createdBy" INTEGER NOT NULL,
  "categoryId" INTEGER NOT NULL,
  "thumbnailUrl" TEXT,
  "durationHours" INTEGER,
  FOREIGN KEY ("categoryId") REFERENCES "CourseCategory"("id")
);

CREATE TABLE "Course_Instructor" (
  "courseId" INTEGER NOT NULL,
  "instructorId" INTEGER NOT NULL,
  PRIMARY KEY ("courseId", "instructorId"),
  FOREIGN KEY ("courseId") REFERENCES "Course"("id") ON DELETE CASCADE,
  FOREIGN KEY ("instructorId") REFERENCES "User"("id") ON DELETE CASCADE
);

CREATE TABLE "Batch" (
  "id" SERIAL PRIMARY KEY,
  "startDate" TIMESTAMP NOT NULL,
  "endDate" TIMESTAMP NOT NULL,
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "batchName" TEXT NOT NULL,
  "instructorId" INTEGER NOT NULL,
  "courseId" INTEGER NOT NULL,
  FOREIGN KEY ("courseId") REFERENCES "Course"("id"),
  FOREIGN KEY ("instructorId") REFERENCES "User"("id")
);

CREATE TABLE "StudentCourse" (
  "id" SERIAL PRIMARY KEY,
  "enrolledAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "status" TEXT NOT NULL DEFAULT 'enrolled',
  "studentId" INTEGER NOT NULL,
  "courseId" INTEGER NOT NULL,
  UNIQUE("studentId", "courseId"),
  FOREIGN KEY ("courseId") REFERENCES "Course"("id"),
  FOREIGN KEY ("studentId") REFERENCES "User"("id")
);

CREATE TABLE "StudentBatch" (
  "id" SERIAL PRIMARY KEY,
  "enrolledAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "status" TEXT NOT NULL DEFAULT 'enrolled',
  "studentId" INTEGER NOT NULL,
  "batchId" INTEGER NOT NULL,
  UNIQUE("studentId", "batchId"),
  FOREIGN KEY ("batchId") REFERENCES "Batch"("id"),
  FOREIGN KEY ("studentId") REFERENCES "User"("id")
);

CREATE TABLE "Schedule" (
  "id" SERIAL PRIMARY KEY,
  "startTime" TIMESTAMP NOT NULL,
  "endTime" TIMESTAMP NOT NULL,
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "link" TEXT,
  "platform" TEXT NOT NULL DEFAULT 'zoom',
  "topic" TEXT,
  "batchId" INTEGER NOT NULL,
  "recordingUrl" TEXT,
  FOREIGN KEY ("batchId") REFERENCES "Batch"("id")
);

CREATE TABLE "Resource" (
  "id" SERIAL PRIMARY KEY,
  "title" TEXT NOT NULL,
  "description" TEXT,
  "fileUrl" TEXT NOT NULL,
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "fileType" TEXT NOT NULL DEFAULT 'document',
  "courseId" INTEGER NOT NULL,
  FOREIGN KEY ("courseId") REFERENCES "Course"("id")
);

CREATE TABLE "ClassRecording" (
  "id" SERIAL PRIMARY KEY,
  "scheduleId" INTEGER NOT NULL,
  "title" TEXT NOT NULL,
  "description" TEXT,
  "recordingUrl" TEXT NOT NULL,
  "uploadedBy" INTEGER NOT NULL,
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  FOREIGN KEY ("scheduleId") REFERENCES "Schedule"("id"),
  FOREIGN KEY ("uploadedBy") REFERENCES "User"("id")
);

CREATE TABLE "CourseReview" (
  "id" SERIAL PRIMARY KEY,
  "rating" INTEGER NOT NULL DEFAULT 5,
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  "review" TEXT,
  "studentId" INTEGER NOT NULL,
  "courseId" INTEGER NOT NULL,
  UNIQUE("studentId", "courseId"),
  FOREIGN KEY ("courseId") REFERENCES "Course"("id"),
  FOREIGN KEY ("studentId") REFERENCES "User"("id")
);

CREATE TABLE "Notification" (
  "id" SERIAL PRIMARY KEY,
  "userId" INTEGER NOT NULL,
  "title" TEXT NOT NULL,
  "message" TEXT NOT NULL,
  "isRead" BOOLEAN NOT NULL DEFAULT FALSE,
  "type" TEXT NOT NULL,
  "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
  FOREIGN KEY ("userId") REFERENCES "User"("id")
);

-- Create indexes for better performance
CREATE INDEX "User_email_idx" ON "User"("email");
CREATE INDEX "User_role_idx" ON "User"("role");
CREATE INDEX "Course_categoryId_idx" ON "Course"("categoryId");
CREATE INDEX "Course_createdBy_idx" ON "Course"("createdBy");
CREATE INDEX "Batch_courseId_idx" ON "Batch"("courseId");
CREATE INDEX "Batch_instructorId_idx" ON "Batch"("instructorId");
CREATE INDEX "Schedule_batchId_idx" ON "Schedule"("batchId");
CREATE INDEX "Resource_courseId_idx" ON "Resource"("courseId");
CREATE INDEX "StudentCourse_studentId_idx" ON "StudentCourse"("studentId");
CREATE INDEX "StudentCourse_courseId_idx" ON "StudentCourse"("courseId");
CREATE INDEX "StudentBatch_studentId_idx" ON "StudentBatch"("studentId");
CREATE INDEX "StudentBatch_batchId_idx" ON "StudentBatch"("batchId");
CREATE INDEX "CourseReview_studentId_idx" ON "CourseReview"("studentId");
CREATE INDEX "CourseReview_courseId_idx" ON "CourseReview"("courseId");
CREATE INDEX "Notification_userId_idx" ON "Notification"("userId");
